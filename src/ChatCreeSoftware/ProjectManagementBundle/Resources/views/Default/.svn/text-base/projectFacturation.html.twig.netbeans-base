{% extends "ProjectManagementBundle::layout.html.twig" %}

{% block stylesheet %}
    {{ parent() }}
{% endblock %}

{% block navigation %}
    {{ render(controller("ProjectManagementBundle:Navigation:navigation",{'selected': project.id + 8 })) }}
{% endblock %}

{% block projectmenu %}
    {{ render(controller("ProjectManagementBundle:Navigation:projectNavigation",{'selected': 8, 'id': project.id, 'name': project.projectName })) }}
{% endblock %}

{% block content %}
    <div id="dialog">
        Voulez-vous vraiment supprimer cette facture ?
    </div>
    
<div class="row row-side-margin"">
    <div class="col-sm-12">
    <table id="invoices" class="table table-striped table-bordered">
        <thead>
        <tr>
            <th>&nbsp;</th>
            <th class="taskname">&Eacute;tape</th>
            <th class="amount">Montant HT</th>
            <th class="invoiced">Factur&eacute;</th>
            <th class="invoiced">No facture</th>            
            <th class="reminder">Relanc&eacute;</th>
            <th class="paid">R&eacute;gl&eacute;</th>
        </tr>
        </thead>
        <tbody class="rows">
            {% for invoice in project.invoices %}
                {% if invoice.type=="I" %}
                <tr id="{{invoice.id}}">
                    <td>{%if invoice.invoiced %}&nbsp;{%else%}<input type="checkbox">{%endif%}</td>
                    <td>{{invoice.etape}}</td>
                    <td>{{invoice.amount}}</td>
                    <td>{%if invoice.invoiced %}{{invoice.invoiced|date("d/m/Y")}}{% endif %}</td>
                    <td>{%if invoice.item %}<a href="{{path('_invoice_invoice',{'id': invoice.item.invoice.number})}}" target="_new">{{invoice.item.invoice.number}}</a>{% endif %}</td>
                    <td>{%if invoice.reminder %}{{invoice.reminder|date("d/m/Y")}}{% endif %}</td>
                    <td>{%if invoice.paid %}{{invoice.paid|date("d/m/Y")}}{% endif %}</td>
                </tr>
                {% endif %}
            {% endfor %}
        </tbody>
        <tfoot>    
        <tr class="total">
            <td>&nbsp;</td>
            <td class="taskname"><b>Total</b></td>
            <td class="amount"><b><span class="invoicing_total"></span></b></td>
            <td class="invoice">&nbsp;</td>
            <td class="invoice">&nbsp;</td>
            <td class="reminder"><b>R&eacute;gl&eacute;</b></td>
            <td class="paid"><b><span class="paid_total"></span></b></td>
        </tr>
        </tfoot>
    </table>
    </div>
</div>
{% endblock %}
    
{% block javascript %}
$(document).ready(function() {
    oTable = $('#invoices').DataTable({
        autoWidth: false,
        buttons: [
            {text: '<span class="glyphicon glyphicon-plus"></span>Ajouter', className: 'New', action: function () {
                if ($('tr.new').length > 0) {
                    alert("Une nouvelle ligne est déjà en cours d'édition");
                } else {                              
                    var nRow = oTable.row.add(['<input type="checkbox">','', '', '', '', '','']).draw(false).node();
                    $(nRow).addClass('new');
                    oTable.select.style( "api" );
                    oTable.row(".selected").deselect();
                    oTable.row( nRow ).select(  );
                    editRow(nRow);
                    nEditing = nRow;
                }
            }},
            {text: '<span class="glyphicon glyphicon-pencil"></span>Editer', className: 'Edit selectionRequired disabled', action: function ( ) {
                var row = this.row({selected: true}).node();
                
                 if ($('tr.new').length > 0) {
                    alert("Une nouvelle ligne est déjà en cours d'édition");
                } else {
                    editRow(row);
                    oTable.select.style( "api" );
                    nEditing = row;
                }
                
            }},
            {text: '<span class="glyphicon glyphicon-file"></span>Facturer', className: 'Invoice selectionRequired disabled', action: function() {
                var rows = $('tbody.rows > tr > td > input:checked').parent().parent();

                var invoiceRows = new Array();
                var invoiceCount = 0;
                for (var i = 0; i < rows.length; i++) {
                    var rowId = $(rows[i]).attr('id');
                    invoiceRows[invoiceCount++] = rowId;
                }
                if( invoiceCount > 0 ){
                    var params = "itemIds=" + JSON.stringify(invoiceRows);
                    var url = "{{path('_new_invoice')}}";
                    $.ajax({
                        type: "POST",
                        url: url,
                        data: params,
                        dataType: "json",
                        async: false,
                        success: function(data) {
                            if (data.response === 200) {
                                $('td.invoiceDate',rows).html(data.invoiceDate);
                                $('td.invoice',rows).html('<a href='+data.url+' target="_new">'+data.invoiceNumber+'</a>');
                                $('input:checked',rows).replaceWith("&nbsp;");
                                $("a.btn.btn-default.Invoice").addClass("disabled");
                                
                                var myWindow = window.open( data.url,'Facture',"width=600, height=400");
                            } else {
                                alert( "Impossible de créer une nouvelle facture" );
                            }
                        },
                        error: function( jqXHR, textStatus, errorThrown ) {
                            alert( textStatus );
                            projectUtilities.restoreRow( nRow );
                        }
                    });
                }
            }},
            {text: '<span class="glyphicon glyphicon-remove"></span>Supprimer', className: 'Delete selectionRequired disabled', action: function ( ) {
                var row = this.row({selected: true});
                var invoiceId = $(row.node()).attr('id');

                var deleteDialog = $("#dialog");
                if( $(row.node()).hasClass( 'new' ) ) {
                    oTable.rows( row ).remove().draw(false);
                    $("a.btn.btn-default.selectionRequired").addClass("disabled");;
                } else {
                    $("#dialog").dialog({
                        autoOpen: false,
                        modal: true,
                        buttons: {
                            "Confirmer" : {
                                text: "Confirmer", 
                                class: "btn-primary",
                                click: function() {
                                    $(this).dialog("close");
                                    var params = "id=" + invoiceId; 
								
                                    var url="{{path('_project_invoice_ajax_delete')}}";

                                    $.ajax( {
                                        type: "POST",
                                        url: url,
                                        data: params,
                                        dataType: "json",
                                        success: function( data ) {
                                            if( data.response == 200 ) {
                                                oTable.rows( row ).remove().draw(false);
                                                $("a.btn.btn-default.selectionRequired").addClass("disabled");;
                                            } else {
                                                alert( "Erreur lors de la suppression" );
                                            }
                                        },
                                        error: function( jqXHR, textStatus, errorThrown ) {
                                            alert( textStatus );
                                        }
                                    });
                                }
                            },
                            "Annuler" : function() {
                                $(this).dialog("close");
                            }
                        },
                        title: "Confirmation de suppression"
                    });

                    $("#dialog").dialog("open");
                }

                deleteDialog.dialog("open");
            }},
            {text: '<span class="glyphicon glyphicon-remove-circle"></span>Annuler', className: 'Cancel', action: function() { projectUtilities.cancelEdit(); } },
            {text: '<span class="glyphicon glyphicon-floppy-disk"></span>Enregistrer', className: 'Save', action: function() {
                saveRow( nEditing );
                nEditing = null;
            }},
        ],
        columns: [
            {width: "30px"},
            {width: "300px"},
            {width: "140px", className: "amount"},
            {width: "140px", className: "invoiceDate",type: "date-euro"},
            {width: "140px", className: "invoice" },            
            {width: "140px", className: "reminderDate", type: "date-euro"},
            {width: "140px", className: "paid", type: "date-euro"},
        ],
        dom: 'l<"clear">Bfrtp',
        footerCallback: function ( row, data, start, end, display ) {
            var rows = $('tbody.rows > tr');
            var total = 0, paid = 0;

            for (var i = 0; i < data.length; i++) {
                amount = parseFloat(data[i][2]);
                if (isNaN(amount)) {
                    amount = 0;
                }
                total += amount;
                isPaid = data[i][6];
                if (isPaid) {
                    paid += amount;
                }
                invoiceDate = "";
                reminderDate = "";
                paidDate = "";
                iDate = data[i][3];
                if (iDate !== "") {
                    invoiceDate = $.datepicker.parseDate('dd/mm/yy', iDate);
                    invoiceDate.setHours(0, 0, 0, 0);
                    // Add 30 days
                    invoiceDate.setDate(invoiceDate.getDate() + 30);
                }
                rDate = data[i][5];
                if (rDate !== "") {
                    reminderDate = $.datepicker.parseDate('dd/mm/yy', rDate);
                    reminderDate.setHours(0, 0, 0, 0);
                    // Add 30 days
                    reminderDate.setDate(reminderDate.getDate() + 30);
                }
                pDate = data[i][6];
                if (pDate !== "") {
                    paidDate = $.datepicker.parseDate('dd/mm/yy', pDate);
                    paidDate.setHours(0, 0, 0, 0);
                }
                now = new Date();
                now.setHours(0, 0, 0, 0);
                if (pDate === "" && ((iDate !== "" && invoiceDate < now) && (rDate === "" || reminderDate < now))) {
                    $('td', rows[i]).addClass('overbudget');
                } else {
                    $('td', rows[i]).removeClass('overbudget');
                }

            }
            $('tr.total > td.amount').text(total);
            budget = parseFloat('{{ project.projectPrice }}');
            if (isNaN(budget)) {
                budget = 0;
            }
            $('tr.total > td.amount').removeClass('budget_match');
            $('tr.total > td.amount').removeClass('overbudget');

            if (total === budget) {
                $('tr.total > td.amount').addClass('budget_match');
            } else if (total > budget) {
                $('tr.total > td.amount').addClass('overbudget');
            }
            $('tr.total > td.paid').text(paid);
        },            
        language: {
            lengthMenu: "Afficher _MENU_ lignes par page",
            zeroRecords: "Aucun &eacute;l&eacute;ment de facturation",
            loadingRecords: "Chargement...",
            processing: "Traitement...",
            search: "Recherche:",
            paginate: {
                first: " ",
                last: " ",
                next: " ",
                previous: " "
            }
        },
        order: [[3, 'desc']],
        ordering: true,
        select: {
            style: 'single'
        }      
    });
    nEditing = null;

    $("#dialog").dialog({
        autoOpen: false,
        modal: true,
        buttons: {
            "Confirmer" : {
                text: "Confirmer", 
                class: "btn-primary",
                click: function() {
                    $(this).dialog("close");
                }
            },
            "Annuler": function() {
                $(this).dialog("close");
            }
        },
        title: "Confirmation de suppression"
    });

    $('#invoices tbody').on( 'click', 'tr', function () {
        if (nEditing == null ) {
            if ( $(this).hasClass('selected') ) {
                $("a.btn.btn-default.selectionRequired").removeClass("disabled");
                if( $('td.invoice', this).text() !== "" ) {
                    $("a.btn.btn-default.Invoice,a.btn.btn-default.Delete").addClass("disabled");
                }   
            } else {
                $("a.btn.btn-default.Edit, a.btn.btn-default.selectionRequired").addClass("disabled");;
            }
        }
    } );
    
    $('#invoices').on( 'click', 'input:checkbox', function() {
        var checked = $('#invoices input:checked');
        if( checked.length > 0 ){
            $("a.btn.btn-default.selectionRequired").removeClass("disabled");            
        } else {
            $("a.btn.btn-default.selectionRequired").addClass("disabled");
        }
    });
    
    $( "#invoices" ).keydown( function( event ) { projectUtilities.keydown( event ) } );   
    
    $("a.btn.btn-default.Cancel, a.btn.btn-default.Save").hide();
});

function editRow(nRow) {
    var aData = oTable.row( nRow ).data();
    var jqTds = $('>td', nRow);
    jqTds[1].innerHTML = '<input value="' + aData[1] + '" type="text" class="form-control">';
    jqTds[2].innerHTML = '<input value="' + aData[2] + '" type="text" class="form-control">';
    jqTds[5].innerHTML = '<input value="' + aData[5] + '" type="text" class="form-control datepicker">';
    jqTds[6].innerHTML = '<input value="' + aData[6] + '" type="text" class="form-control datepicker">';

    $("input.datepicker").datepicker({dateFormat: "dd/mm/yy"});
    $( "input[type=text]:visible:first", nRow ).focus();
    $("a.btn.btn-default.New,a.btn.btn-default.selectionRequired").addClass("disabled");
    $("a.btn.btn-default.Cancel, a.btn.btn-default.Save").show();
}

function saveRow(nRow) {
    var jqInputs = $('input[type!="checkbox"]', nRow);
    var params = "";
    var action = "U";

    if ($(nRow).hasClass('new')) {
        $(nRow).removeClass('new');
        action = "C";
    } else {
        var rowId = $(nRow).attr('id');
        params = "id=" + rowId + "&";
    }

    params += "type=I&pid={{project.id}}&action=" + action + "&etape=" + jqInputs[0].value + "&montant=" + jqInputs[1].value +
            "&relance=" + jqInputs[2].value + "&paye=" + jqInputs[3].value;

    var url = "{{ path('_project_invoicing_ajax_update') }}";
    $.ajax({
        type: "POST",
        url: url,
        data: params,
        dataType: "json",
        success: function(data) {
            if (data.response == 200) {
                oTable.cell( nRow, 1 ).data( jqInputs[0].value, nRow, 1, false);
                oTable.cell( nRow, 2 ).data( jqInputs[1].value, nRow, 2, false);
                oTable.cell( nRow, 5 ).data( jqInputs[2].value, nRow, 5, false);
                oTable.cell( nRow, 6 ).data( jqInputs[3].value, nRow, 6, false);

                $(nRow).attr("id", data.id);
                oTable.row( nRow ).draw();
                oTable.select.style('single');
                $("a.btn.btn-default.New").removeClass("disabled");
                $("a.btn.btn-default.Cancel, a.btn.btn-default.Save").hide();
            } else {
                alert("Erreur lors de la mise à jour");
            }
        },
        error: function( jqXHR, textStatus, errorThrown ) {
            alert( textStatus );
        }
    });
}{% endblock %}