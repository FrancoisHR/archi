<?php

namespace ChatCreeSoftware\BordereauxBundle\Pdf;

class ComparatifPdf extends \FPDI {

    private $pageType;
    private $widths;
    private $aligns;
    private $headings;
    private $companies;
    private $logo;
    private $files = array();
    private $headerFooter = true;
    private $titre;
    private $date;
    private $projet;
    private $description;
    private $lot;
    private $adresseChantier;
    private $adresseClient;
    private $multilineHeight = 5;

    private function setArrayWithDecode($data) {
        $target = array();
        foreach ($data as $key => $value) {
            $target[$key] = iconv("UTF-8", "ISO-8859-1//TRANSLIT", $value);
        }
        return $target;
    }

    public function setType($type) {
        $this->pageType = $type;
    }

    public function setWidths($type, $widths) {
        if (!$this->widths) {
            $this->widths = array();
        }
        $this->widths[$type] = $widths;
    }

    public function setAligns($type, $aligns) {
        if (!$this->aligns) {
            $this->aligns = array();
        }
        $this->aligns[$type] = $aligns;
    }

    public function setHeadings($type, $headings) {
        if (!$this->headings) {
            $this->headings = array();
        }
        $this->headings[$type] = $headings;
    }
    
    public function setCompanies( $companies ) {
        $this->companies = $companies;
    }

    public function setLogo($logo) {
        $this->logo = $logo;
    }

    public function setTitre($titre) {
        $this->titre = iconv("UTF-8", "ISO-8859-1//TRANSLIT", $titre);
    }

    public function setDate($date) {
        $this->date = $date;
    }

    public function setProjet($projet) {
        $this->projet = iconv("UTF-8", "ISO-8859-1//TRANSLIT", $projet);
    }

    public function setDescription($description) {
        $this->description = iconv("UTF-8", "ISO-8859-1//TRANSLIT", $description);
    }

    public function setlot($lot) {
        $this->lot = iconv("UTF-8", "ISO-8859-1//TRANSLIT", $lot);
    }

    public function setAdresseChantier($adresse) {
        $this->adresseChantier = $this->setArrayWithDecode($adresse);
    }

    public function setAdresseClient($adresse) {
        $this->adresseClient = $this->setArrayWithDecode($adresse);
    }

    public function setFiles($files) {
        $this->files = $files;
    }

    public function concat() {
        $headFoot = $this->headerFooter;
        $this->headerFooter = false;
        foreach ($this->files AS $file) {
            $pageCount = $this->setSourceFile($file);
            for ($pageNo = 1; $pageNo <= $pageCount; $pageNo++) {
                $tplIdx = $this->ImportPage($pageNo);
                $s = $this->getTemplatesize($tplIdx);
                $this->AddPage($s['w'] > $s['h'] ? 'L' : 'P', array($s['w'], $s['h']));
                $this->useTemplate($tplIdx);
            }
        }
        // $this->headerFooter = $headFoot;
    }

    private function adresse($adresse) {
        if (array_key_exists("nom", $adresse) && $adresse["nom"]) {
            $this->Cell(80, 5, $adresse["nom"], 0, 2, 'L');
        }
        $this->Cell(80, 5, $adresse["adresse1"], 0, 2, 'L');
        if ($adresse["adresse2"]) {
            $this->Cell(80, 5, $adresse["adresse2"], 0, 2, 'L');
        }
        $this->Cell(15, 5, $adresse["cp"], 0, 0, 'L');
        $this->Cell(55, 5, $adresse["ville"], 0, 2, 'L');
        if (array_key_exists("cadastre", $adresse) && $adresse["cadastre"]) {
            $this->SetX(15);
            $this->Cell(25, 5, "Cadastre : ", 0, 0, 'L');
            $this->Cell(55, 5, $adresse["cadastre"], 0, 2, 'L');
        }
        if (array_key_exists("section", $adresse) && $adresse["section"]) {
            $this->SetX(15);
            $this->Cell(25, 5, "Section : ", 0, 0, 'L');
            $this->Cell(55, 5, $adresse["section"], 0, 2, 'L');
        }
        if (array_key_exists("commune", $adresse) && $adresse["commune"]) {
            $this->SetX(15);
            $this->Cell(25, 5, "Commune : ", 0, 0, 'L');
            $this->Cell(55, 5, $adresse["commune"], 0, 2, 'L');
        }
    }

    public function Header() {
        if ($this->headerFooter) {
            // Logo
            switch ($this->pageType) {
                case "GARDE":
                    $this->Image($this->logo, 10, 10, 0, 20);
                    $this->setXY(-60, 27);
                    $this->SetFont('HelveticaNeue', '', 10);
                    $this->Cell(50, 5, iconv("UTF-8", "ISO-8859-1//TRANSLIT", "Tél : +352 27.76.75.01"), 0, 2, "R");
                    $this->Cell(50, 5, "Fax : +352 24.61.11.57", 0, 2, "R");
                    $this->Cell(50, 5, "info@rl-architecture.lu", 0, 2, "R");

                    $this->setXY(10, 32);
                    $this->SetFont('HelveticaNeue', '', 10);
                    $this->Cell(50, 5, "52, rue de Koerich L-8437 Steinfort", 0, 2, "L");
                    $this->Cell(50, 5, "www.rlambay.lu", 0, 2, "L");

                    $this->Line(10, 45, 410, 43);

                    $this->SetFont('HelveticaNeue', '', 10);
                    $this->setXY(150, 45);
                    $this->Cell(0, 4, "Projet : " . $this->projet, 0, 2, 'R');
                    $this->Cell(0, 4, "Lot : " . $this->lot, 0, 2, 'R');

                    $this->SetFont('HelveticaNeueBd', '', 18);
                    $this->setXY(15, 100);
                    $this->Cell(0, 10, "COMPARATIF DE DEVIS", 0, 2, 'L');
                    $this->SetFontSize(16);
                    $this->Cell(0, 8, $this->description, 0, 2, 'L');

                    $this->setXY(15, 180);
                    $this->SetFontSize(14);
                    $this->Cell(80, 8, "Adresse du chantier", "B", 2, 'L');
                    $this->SetFontSize(10);
                    if( $this->adresseChantier ) {
                        $this->adresse($this->adresseChantier);
                    }

                    $this->setXY(105, 180);
                    $this->SetFontSize(14);
                    $this->Cell(80, 8, "Adresse du client", "B", 2, 'L');
                    $this->SetFontSize(10);
                    if( $this->adresseClient ) {
                        $this->adresse($this->adresseClient);
                    }
                    break;

                case "RESUME":
                    $this->Image($this->logo, 10, 10, 0, 20);

                    $this->setFontSize(9);
                    $this->setXY(-70, 10);
                    $this->Cell(60, 4, "COMPARATIF DE DEVIS", 0, 2, 'R');
                    $this->SetFont('HelveticaNeue', '', 9);
                    $this->Cell(60, 4, $this->description, 0, 2, 'R');
                    $this->Cell(60, 4, $this->projet, 0, 2, 'R');
                    $this->Cell(60, 4, $this->lot, 0, 2, 'R');

                    $this->setXY(10, 35);
                    $this->SetFont('HelveticaNeueBd', '', 18);
                    $this->Cell(0, 10, $this->titre, 'B', 0, 'C');

                    $this->setFontSize(9);
                    $this->setXY(10, 50);
                    $this->SetTextColor(255);
                    $this->SetFillColor(77);
                    
                    $this->setX(200);
                    $nb = count($this->companies);
                    for( $n=0; $n < $nb; $n++) {
                        $this->Cell(40, 5, iconv("UTF-8", "ISO-8859-1//TRANSLIT",$this->companies[$n]), 1, 2*($n == $nb-1), "C",true);
                    }
                    $this->setX(10);
                    $this->Row($this->headings[$this->pageType], true);
                    $this->SetTextColor(77);
                    $this->SetFillColor(255);
                    break;

                case "NORMAL":
                    $this->Image($this->logo, 10, 10, 0, 20);
                    $this->setFontSize(9);
                    $this->setXY(-70, 10);
                    $this->Cell(60, 4, "COMPARATIF DE DEVIS", 0, 2, 'R');
                    $this->SetFont('HelveticaNeue', '', 9);
                    $this->Cell(60, 4, $this->description, 0, 2, 'R');
                    $this->Cell(60, 4, $this->projet, 0, 2, 'R');
                    $this->Cell(60, 4, $this->lot, 0, 2, 'R');

                    $this->setXY(10, 35);
                    $this->SetFont('HelveticaNeueBd', '', 18);
                    $this->Cell(0, 10, $this->titre, 'B', 0, 'C');

                    $this->setFontSize(9);
                    $this->setXY(10, 50);
                    $this->SetTextColor(255);
                    $this->SetFillColor(77);
                    $this->setX(200);
                    $nb = count($this->companies);
                    for( $n=0; $n < $nb; $n++) {
                        $this->Cell(40, 5, iconv("UTF-8", "ISO-8859-1//TRANSLIT",$this->companies[$n]), 1, 2*($n == $nb-1), "C",true);
                    }
                    $this->setX(10);
                    $this->Row($this->headings[$this->pageType], true);
                    $this->SetTextColor(77);
                    $this->SetFillColor(255);
            }
        }
    }

    public function Footer() {
        if ($this->headerFooter) {
            switch ($this->pageType) {
                case "GARDE":
                    break;

                case "RESUME":
                case "NORMAL":
                    $this->SetY(-15);
                    $this->SetFontSize(8);

                    $this->Cell(30, 10, $this->date, 'T', 0, 'C');
                    $this->Cell(350, 5, iconv("UTF-8", "ISO-8859-1//TRANSLIT", "52, rue de Koerich L-8437 Steinfort - Tél : +352 27.76.75.01 - Fax : +352 24.61.11.57"), 'T', 2, 'C');
                    $this->Cell(350, 5, iconv("UTF-8", "ISO-8859-1//TRANSLIT", "info@rl-architecture.lu - www.rlambay.lu"), 0, 0, 'C');
                    $this->SetXY(380, -15);
                    $this->Cell(30, 10, 'Page ' . $this->PageNo() . '/{nb}', 'T', 0, 'C');
            }
        }
    }

    public function pageGarde() {
        $this->setType("GARDE");
        $this->AddPage();
    }

    public function pageResume() {
        $this->setType("RESUME");
        $this->AddPage();
    }

    public function totalResume( $bordereau ) {
        $this->SetFont('HelveticaNeueBd', '', 8);
        $this->SetXY(180, $this->GetY() + 2);
        $this->Cell(20, 5, "Total HTVA", 0, 0, "R");
        $nbDevis = $bordereau->getDevis()->count();
        
        $total = $bordereau->totalDevis();
        
        for( $n=0; $n < $nbDevis; $n++) {
            $this->Cell(40, 5, number_format($total[$n],2, "," , "." ), 1, 2*($n == $nbDevis-1), "R");
        }

        $this->SetXY(180, $this->GetY() + 2);
        $this->Cell(20, 5, "TVA 17%", 0, 0, "R");
        for( $n=0; $n < $nbDevis; $n++) {
            $this->Cell(40, 5, number_format($total[$n]*0.17,2, "," , "." ), 1, 2*($n == $nbDevis-1), "R");
        }

        $this->SetXY(180, $this->GetY() + 2);
        $this->Cell(20, 5, "Total TTC", 0, 0, "R");
        for( $n=0; $n < $nbDevis; $n++) {
            $this->Cell(40, 5, number_format($total[$n]*1.17,2, "," , "." ), 1, 2*($n == $nbDevis-1), "R");
        }
    }

    public function printLigne( $bordereau, $ligne) {
        $position = $ligne->getPosition();
        if ($ligne->getPrestation()) {
            $titre = $ligne->getPrestation()->getTitre();
            $description = str_replace("<br>", "", $ligne->getPrestation()->getDescription());

            $description = str_replace("<ul bullet=\"-\">", "", $description);
            $description = str_replace("<li>", "- ", $description);
            $description = str_replace("</li>", "", $description);
            $description = str_replace("</ul>", "", $description);


            $unite = $ligne->getPrestation()->getUnite();

            if ($ligne->getParametres()) {
                $description .= "\n";
            }
            foreach ($ligne->getParametres() as $parametre) {
                $description .= $parametre->getTitre() . "\n";
            }
        } else {
            $titre = $ligne->getTitre();
            $description = $ligne->getDescription();
            $unite = $ligne->getUnite();
        }
        $quantite = $ligne->getQuantite();
        if ($quantite == 0) {
            $quantite = "";
        }
        if (strpos($position, ".") === false) {
            $this->SetFont('HelveticaNeueBd', '', 10);
            if ($this->GetPageHeight() - ($this->getY() + 10) < 50) {
                $this->AddPage($this->CurOrientation);
            }
        }
        $type = "";
        if ($ligne->getType()) {
            $type = "** " . strtoupper($ligne->getType()) . " ** ";
        }
        switch ($this->pageType) {
            case "NORMAL":
                $values = array($position, $type . $titre . "\n" . $description, $unite, $quantite);
                
                foreach( $ligne->getLignesDevis() as $devis ){
                    $pu=$devis->getPrixUnitaire();
                    $puText = number_format( $pu, 2, "," , "." );
                    $total = number_format( $quantite * $pu, 2, "," , "." );
                    
                    if( $ligne->getOptionel() || $ligne->getAlternativeDe() ){
                        $values[] = "($puText)";
                        $values[] = "($total)";
                    } else {
                        $values[] = $puText;
                        $values[] = $total;                        
                    }

                }
                $missing = $bordereau->getDevis()->count() - $ligne->getLignesDevis()->count();
                for( $n=0; $n < $missing; $n++ ){
                    $values[]="";
                    $values[]="";
                }
                
                if($ligne->getPhoto()){
                    $filepath = $bordereau->getProject()->getProjectPath() . "/.bordereaux/" . $bordereau->getId() . "/" . $ligne->getPhoto();
                    $this->Row($values, false, $filepath, $ligne->getRapportPhoto() );
                }else {
                    $this->Row($values);
                }
                break;
            case "RESUME":
                $values = array($position, $type . $titre);
                foreach( $ligne->totalDevis( ! $ligne->getOptionel() ) as $total ){
                    $value = number_format( $total, 2, "," , "." );
                    if( $ligne->getOptionel() || $ligne->getAlternativeDe() ){
                        $values[] = "($value)";
                    } else {
                        $values[] = $value;
                    }
                }
                $this->Row( $values );
                break;
        }
        if (strpos($position, ".") === false) {
            $this->SetFont('HelveticaNeue', '', 10);
        }

        foreach ($ligne->getFilles() as $fille) {
            $this->printLigne( $bordereau, $fille);
        }
        foreach ($ligne->getAlternatives() as $alternative) {
            $this->printLigne( $bordereau, $alternative);
        }
    }

    function Row($data, $fill = false, $image = null, $ratio=1 ) {
        //Calcule la hauteur de la ligne
        $nb = 0;
        $imageMargin = 0;
        $imageBoxHeight = 0;
        $imageWidth = 0;
        $imageHeight = 0;
        if( $image ){
            $imageSize = getimagesize( $image );
            $targetSize = ($this->widths[$this->pageType][1]*$ratio) - 10.0;
            
            $widthScale = $targetSize / $imageSize[0];
            $heightScale = $targetSize / $imageSize[1];
            
            $imageScale = min( $widthScale, $heightScale );
            
            $imageWidth = $imageSize[0] * $imageScale ;
            $imageHeight = $imageSize[1] * $imageScale ;
            
            $imageBoxHeight = ceil($imageHeight)+10;
            
            $imageMargin = ($this->widths[$this->pageType][1]-10-$imageWidth)/2;
        }
        

        
        for ($i = 0; $i < count($data); $i++) {
            $data[$i] = iconv("UTF-8", "ISO-8859-1//TRANSLIT", $data[$i]);
            if( $image && $i == 1 ){
                $nb = max($nb, $this->NbLines($this->widths[$this->pageType][$i], $data[$i]) + $imageBoxHeight / $this->multilineHeight );
            } else {
                $nb = max($nb, $this->NbLines($this->widths[$this->pageType][$i], $data[$i]));
            }
        }
       
        while ($nb) {
            $nb = 0;
            for ($i = 0; $i < count($data); $i++) {
                if( $image && $i == 1 ){
                    $nb = max($nb, $this->NbLines($this->widths[$this->pageType][$i], $data[$i]) + $imageBoxHeight / $this->multilineHeight );
                } else {
                    $nb = max($nb, $this->NbLines($this->widths[$this->pageType][$i], $data[$i]));
                }
            }

            $remainingLinesOnPage = ($this->PageBreakTrigger - $this->GetY()) / $this->multilineHeight;

            if ($remainingLinesOnPage < 5 && $remainingLinesOnPage - $nb < 0) {
                $this->AddPage($this->CurOrientation);
                $remainingLinesOnPage = ($this->PageBreakTrigger - $this->GetY()) / $this->multilineHeight;
            }

            $linesToPrint = min($nb, $remainingLinesOnPage);
            $h = $this->multilineHeight * $linesToPrint;

            $remainingText = array();
            for ($i = 0; $i < count($data); $i++) {
                $w = $this->widths[$this->pageType][$i];
                $a = isset($this->aligns[$this->pageType][$i]) ? $this->aligns[$this->pageType][$i] : 'L';
                //Sauve la position courante
                $x = $this->GetX();
                $y = $this->GetY();
                //Dessine le cadre
                $this->Rect($x, $y, $w, $h);
                //Imprime le texte
                $remainingText[$i] = $this->MultiCell($w, $this->multilineHeight, $data[$i], 0, $a, $fill, $linesToPrint);
                $imageY = $this->GetY();
                if( $i == 1 && $image && $nb<=$linesToPrint ) {
                    $this->Image( $image, $x+5+$imageMargin , $imageY+5, $imageWidth, $imageHeight );
                }
                //Repositionne à droite
                $this->SetXY($x + $w, $y);
            }

            $nb -= $linesToPrint;
            if ($nb > 0) {
                $this->AddPage($this->CurOrientation);
                $data = $remainingText;
            }
        }
        //Va à la ligne
        $this->Ln($h);
    }

    function CheckPageBreak($h) {
        //Si la hauteur h provoque un débordement, saut de page manuel
        if ($this->GetY() + $h > $this->PageBreakTrigger)
            $this->AddPage($this->CurOrientation);
    }

    function NbLines($w, $txt) {
        //Calcule le nombre de lignes qu'occupe un MultiCell de largeur w
        $cw = &$this->CurrentFont['cw'];
        if ($w == 0)
            $w = $this->w - $this->rMargin - $this->x;
        $wmax = ($w - 2 * $this->cMargin) * 1000 / $this->FontSize;
        $s = str_replace("\r", '', $txt);
        $nb = strlen($s);
        if ($nb > 0 and $s[$nb - 1] == "\n")
            $nb--;
        $sep = -1;
        $i = 0;
        $j = 0;
        $l = 0;
        $nl = 1;
        while ($i < $nb) {
            $c = $s[$i];
            if ($c == "\n") {
                $i++;
                $sep = -1;
                $j = $i;
                $l = 0;
                $nl++;
                continue;
            }
            if ($c == ' ')
                $sep = $i;
            $l += $cw[$c];
            if ($l > $wmax) {
                if ($sep == -1) {
                    if ($i == $j)
                        $i++;
                } else
                    $i = $sep + 1;
                $sep = -1;
                $j = $i;
                $l = 0;
                $nl++;
            } else
                $i++;
        }
        return $nl;
    }

    function MultiCell($w, $h, $txt, $border = 0, $align = 'J', $fill = false, $maxline = 0) {
        //Output text with automatic or explicit line breaks, at most $maxline lines
        $cw = &$this->CurrentFont['cw'];
        if ($w == 0)
            $w = $this->w - $this->rMargin - $this->x;
        $wmax = ($w - 2 * $this->cMargin) * 1000 / $this->FontSize;
        $s = str_replace("\r", '', $txt);
        $nb = strlen($s);
        if ($nb > 0 && $s[$nb - 1] == "\n")
            $nb--;
        $b = 0;
        if ($border) {
            if ($border == 1) {
                $border = 'LTRB';
                $b = 'LRT';
                $b2 = 'LR';
            } else {
                $b2 = '';
                if (is_int(strpos($border, 'L')))
                    $b2 .= 'L';
                if (is_int(strpos($border, 'R')))
                    $b2 .= 'R';
                $b = is_int(strpos($border, 'T')) ? $b2 . 'T' : $b2;
            }
        }
        $sep = -1;
        $i = 0;
        $j = 0;
        $l = 0;
        $ns = 0;
        $nl = 1;
        while ($i < $nb) {
            //Get next character
            $c = $s[$i];
            if ($c == "\n") {
                //Explicit line break
                if ($this->ws > 0) {
                    $this->ws = 0;
                    $this->_out('0 Tw');
                }
                $this->Cell($w, $h, substr($s, $j, $i - $j), $b, 2, $align, $fill);
                $i++;
                $sep = -1;
                $j = $i;
                $l = 0;
                $ns = 0;
                $nl++;
                if ($border && $nl == 2)
                    $b = $b2;
                if ($maxline && $nl > $maxline)
                    return substr($s, $i);
                continue;
            }
            if ($c == ' ') {
                $sep = $i;
                $ls = $l;
                $ns++;
            }
            $l += $cw[$c];
            if ($l > $wmax) {
                //Automatic line break
                if ($sep == -1) {
                    if ($i == $j)
                        $i++;
                    if ($this->ws > 0) {
                        $this->ws = 0;
                        $this->_out('0 Tw');
                    }
                    $this->Cell($w, $h, substr($s, $j, $i - $j), $b, 2, $align, $fill);
                } else {
                    if ($align == 'J') {
                        $this->ws = ($ns > 1) ? ($wmax - $ls) / 1000 * $this->FontSize / ($ns - 1) : 0;
                        $this->_out(sprintf('%.3F Tw', $this->ws * $this->k));
                    }
                    $this->Cell($w, $h, substr($s, $j, $sep - $j), $b, 2, $align, $fill);
                    $i = $sep + 1;
                }
                $sep = -1;
                $j = $i;
                $l = 0;
                $ns = 0;
                $nl++;
                if ($border && $nl == 2)
                    $b = $b2;
                if ($maxline && $nl > $maxline) {
                    if ($this->ws > 0) {
                        $this->ws = 0;
                        $this->_out('0 Tw');
                    }
                    return substr($s, $i);
                }
            } else
                $i++;
        }
        //Last chunk
        if ($this->ws > 0) {
            $this->ws = 0;
            $this->_out('0 Tw');
        }
        if ($border && is_int(strpos($border, 'B')))
            $b .= 'B';
        $this->Cell($w, $h, substr($s, $j, $i - $j), $b, 2, $align, $fill);
        $this->x = $this->lMargin;
        return '';
    }

}
